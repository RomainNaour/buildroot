From b1e8f150900b5ae8135678333dac5a4d61cf7218 Mon Sep 17 00:00:00 2001
From: Romain Naour <romain.naour@openwide.fr>
Date: Wed, 29 Jul 2015 23:38:06 +0200
Subject: [PATCH 4/5] avoid stat64 redifinition with musl
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

musl define stat64() as an alias to stat(), this leads to a
stat() function redefinition.

On Glibc stat64() is an alias to __xstat64() which is has an
hidden prototype, that is why stat64() can be defined in padsp.c.

stat64 can't be undef since it's also the name of the type
"struct stat64".

Rename padsp stat64() to _stat64(), also rename the function
pointer _stat64 to __stat64.

Fixes:
In file included from utils/padsp.c:40:0:
utils/padsp.c:2516:5: error: redefinition of ‘stat’
 int stat64(const char *pathname, struct stat64 *buf) {

Signed-off-by: Romain Naour <romain.naour@openwide.fr>
---
 src/utils/padsp.c | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/src/utils/padsp.c b/src/utils/padsp.c
index d0dc765..cf01c3a 100644
--- a/src/utils/padsp.c
+++ b/src/utils/padsp.c
@@ -110,6 +110,10 @@ struct fd_info {
 static int dsp_drain(fd_info *i);
 static void fd_info_remove_from_list(fd_info *i);
 
+#ifdef HAVE_OPEN64
+int _stat64(const char *pathname, struct stat64 *buf);
+#endif
+
 static pthread_mutex_t fd_infos_mutex = PTHREAD_MUTEX_INITIALIZER;
 static pthread_mutex_t func_mutex = PTHREAD_MUTEX_INITIALIZER;
 
@@ -128,7 +132,7 @@ static int (*___xstat)(int, const char *, struct stat *) = NULL;
 static int (*_open64)(const char *, int, mode_t) = NULL;
 static int (*___open64_2)(const char *, int) = NULL;
 static FILE* (*_fopen64)(const char *path, const char *mode) = NULL;
-static int (*_stat64)(const char *, struct stat64 *) = NULL;
+static int (*__stat64)(const char *, struct stat64 *) = NULL;
 #ifdef _STAT_VER
 static int (*___xstat64)(int, const char *, struct stat64 *) = NULL;
 #endif
@@ -210,8 +214,8 @@ do { \
 #define LOAD_STAT64_FUNC() \
 do { \
     pthread_mutex_lock(&func_mutex); \
-    if (!_stat64) \
-        _stat64 = (int (*)(const char *, struct stat64 *)) dlsym_fn(RTLD_NEXT, "stat64"); \
+    if (!__stat64) \
+        __stat64 = (int (*)(const char *, struct stat64 *)) dlsym_fn(RTLD_NEXT, "stat64"); \
     pthread_mutex_unlock(&func_mutex); \
 } while(0)
 
@@ -2483,7 +2487,7 @@ int stat(const char *pathname, struct stat *buf) {
 #endif
 #else
 #ifdef HAVE_OPEN64
-    ret = stat64("/dev", &parent);
+    ret = _stat64("/dev", &parent);
 #else
     ret = stat("/dev", &parent);
 #endif
@@ -2513,17 +2517,17 @@ int stat(const char *pathname, struct stat *buf) {
 
 #ifdef HAVE_OPEN64
 
-int stat64(const char *pathname, struct stat64 *buf) {
+int _stat64(const char *pathname, struct stat64 *buf) {
     struct stat oldbuf;
     int ret;
 
-    debug(DEBUG_LEVEL_VERBOSE, __FILE__": stat64(%s)\n", pathname?pathname:"NULL");
+    debug(DEBUG_LEVEL_VERBOSE, __FILE__": _stat64(%s)\n", pathname?pathname:"NULL");
 
     if (!pathname ||
         !buf ||
         !is_audio_device_node(pathname)) {
         LOAD_STAT64_FUNC();
-        return _stat64(pathname, buf);
+        return __stat64(pathname, buf);
     }
 
     ret = stat(pathname, &oldbuf);
@@ -2623,7 +2627,7 @@ int __xstat64(int ver, const char *pathname, struct stat64 *buf) {
         return -1;
     }
 
-    return stat64(pathname, buf);
+    return _stat64(pathname, buf);
 }
 
 #endif
-- 
2.4.3

